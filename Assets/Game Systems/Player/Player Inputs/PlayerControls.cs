//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Game Systems/Player/Player Inputs/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Right Handed Player Controls"",
            ""id"": ""461bce25-7762-40c5-b639-f190649be6d6"",
            ""actions"": [
                {
                    ""name"": ""Trigger"",
                    ""type"": ""Button"",
                    ""id"": ""3e1aee5b-00b2-4583-9ffe-bcca745bff9f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Grip"",
                    ""type"": ""Button"",
                    ""id"": ""ce7e3e6c-793e-4389-b53d-d062e9a815ab"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Up Button"",
                    ""type"": ""Button"",
                    ""id"": ""ac96c10b-c955-4a46-8e67-bf16bc069b53"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down Button"",
                    ""type"": ""Button"",
                    ""id"": ""7237a5f6-de47-4254-8d26-9e6ab5948aae"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Lantern Button"",
                    ""type"": ""Button"",
                    ""id"": ""fc9a0a7d-fa40-4397-b1d5-66b19ce0896f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1ce80054-410d-4112-a332-50faa7fb4f23"",
                    ""path"": ""<XRController>{RightHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up Button"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""42476b21-4839-4b03-925f-694b9721946c"",
                    ""path"": ""<XRController>{RightHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down Button"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8e53b6d3-7c41-46df-b516-584cfb435e74"",
                    ""path"": ""<XRController>{RightHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fc5ae93c-ae8c-4c47-8715-cf983eac09d9"",
                    ""path"": ""<XRController>{RightHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Trigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f90d401e-936f-4fae-bffa-45777b9b87bc"",
                    ""path"": ""<XRController>{LeftHand}/thumbstickClicked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lantern Button"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""63ddb17d-fa27-4414-a2da-deb4b7f4938a"",
                    ""path"": ""<XRController>{LeftHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lantern Button"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""55a0b1b5-9380-4d90-8cfa-455d459d8c64"",
                    ""path"": ""<XRController>{LeftHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lantern Button"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bbcb1a99-9003-40c6-a2fa-ef27edcb4dc0"",
                    ""path"": ""<XRController>{LeftHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lantern Button"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Right Handed Player Controls
        m_RightHandedPlayerControls = asset.FindActionMap("Right Handed Player Controls", throwIfNotFound: true);
        m_RightHandedPlayerControls_Trigger = m_RightHandedPlayerControls.FindAction("Trigger", throwIfNotFound: true);
        m_RightHandedPlayerControls_Grip = m_RightHandedPlayerControls.FindAction("Grip", throwIfNotFound: true);
        m_RightHandedPlayerControls_UpButton = m_RightHandedPlayerControls.FindAction("Up Button", throwIfNotFound: true);
        m_RightHandedPlayerControls_DownButton = m_RightHandedPlayerControls.FindAction("Down Button", throwIfNotFound: true);
        m_RightHandedPlayerControls_LanternButton = m_RightHandedPlayerControls.FindAction("Lantern Button", throwIfNotFound: true);
    }

    ~@PlayerControls()
    {
        UnityEngine.Debug.Assert(!m_RightHandedPlayerControls.enabled, "This will cause a leak and performance issues, PlayerControls.RightHandedPlayerControls.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Right Handed Player Controls
    private readonly InputActionMap m_RightHandedPlayerControls;
    private List<IRightHandedPlayerControlsActions> m_RightHandedPlayerControlsActionsCallbackInterfaces = new List<IRightHandedPlayerControlsActions>();
    private readonly InputAction m_RightHandedPlayerControls_Trigger;
    private readonly InputAction m_RightHandedPlayerControls_Grip;
    private readonly InputAction m_RightHandedPlayerControls_UpButton;
    private readonly InputAction m_RightHandedPlayerControls_DownButton;
    private readonly InputAction m_RightHandedPlayerControls_LanternButton;
    public struct RightHandedPlayerControlsActions
    {
        private @PlayerControls m_Wrapper;
        public RightHandedPlayerControlsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Trigger => m_Wrapper.m_RightHandedPlayerControls_Trigger;
        public InputAction @Grip => m_Wrapper.m_RightHandedPlayerControls_Grip;
        public InputAction @UpButton => m_Wrapper.m_RightHandedPlayerControls_UpButton;
        public InputAction @DownButton => m_Wrapper.m_RightHandedPlayerControls_DownButton;
        public InputAction @LanternButton => m_Wrapper.m_RightHandedPlayerControls_LanternButton;
        public InputActionMap Get() { return m_Wrapper.m_RightHandedPlayerControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RightHandedPlayerControlsActions set) { return set.Get(); }
        public void AddCallbacks(IRightHandedPlayerControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_RightHandedPlayerControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RightHandedPlayerControlsActionsCallbackInterfaces.Add(instance);
            @Trigger.started += instance.OnTrigger;
            @Trigger.performed += instance.OnTrigger;
            @Trigger.canceled += instance.OnTrigger;
            @Grip.started += instance.OnGrip;
            @Grip.performed += instance.OnGrip;
            @Grip.canceled += instance.OnGrip;
            @UpButton.started += instance.OnUpButton;
            @UpButton.performed += instance.OnUpButton;
            @UpButton.canceled += instance.OnUpButton;
            @DownButton.started += instance.OnDownButton;
            @DownButton.performed += instance.OnDownButton;
            @DownButton.canceled += instance.OnDownButton;
            @LanternButton.started += instance.OnLanternButton;
            @LanternButton.performed += instance.OnLanternButton;
            @LanternButton.canceled += instance.OnLanternButton;
        }

        private void UnregisterCallbacks(IRightHandedPlayerControlsActions instance)
        {
            @Trigger.started -= instance.OnTrigger;
            @Trigger.performed -= instance.OnTrigger;
            @Trigger.canceled -= instance.OnTrigger;
            @Grip.started -= instance.OnGrip;
            @Grip.performed -= instance.OnGrip;
            @Grip.canceled -= instance.OnGrip;
            @UpButton.started -= instance.OnUpButton;
            @UpButton.performed -= instance.OnUpButton;
            @UpButton.canceled -= instance.OnUpButton;
            @DownButton.started -= instance.OnDownButton;
            @DownButton.performed -= instance.OnDownButton;
            @DownButton.canceled -= instance.OnDownButton;
            @LanternButton.started -= instance.OnLanternButton;
            @LanternButton.performed -= instance.OnLanternButton;
            @LanternButton.canceled -= instance.OnLanternButton;
        }

        public void RemoveCallbacks(IRightHandedPlayerControlsActions instance)
        {
            if (m_Wrapper.m_RightHandedPlayerControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRightHandedPlayerControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_RightHandedPlayerControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RightHandedPlayerControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RightHandedPlayerControlsActions @RightHandedPlayerControls => new RightHandedPlayerControlsActions(this);
    public interface IRightHandedPlayerControlsActions
    {
        void OnTrigger(InputAction.CallbackContext context);
        void OnGrip(InputAction.CallbackContext context);
        void OnUpButton(InputAction.CallbackContext context);
        void OnDownButton(InputAction.CallbackContext context);
        void OnLanternButton(InputAction.CallbackContext context);
    }
}
